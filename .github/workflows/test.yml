name: Run tests

on:
  push:
    branches:
      - master
      - dev
      - 1.x
    paths-ignore:
      - '**.md'
      - '**.yml'
      - '**.yaml'
      - '!.github/workflows/test.yml'
  pull_request:
    branches:
      - master
      - dev
      - 1.x
    paths-ignore:
      - '**.md'
      - '**.yml'
      - '**.yaml'
      - '!.github/workflows/test.yml'

env:
  GO111MODULE: on
  GOPROXY: "https://proxy.golang.org"

jobs:
  lint:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          #- windows-latest
    name: Run golangci-lint
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.20'
          cache: false

      - name: Setup and run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.61.0
          args: -v -E gofumpt -E gocritic -E misspell -E revive -E godot --timeout 5m
  test:
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        go: ['1.20', '1.23']
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    name: Go ${{ matrix.go }} @ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Print Go environment
        id: go-env
        run: |
          printf "Using go at: $(which go)\n"
          printf "Go version: $(go version)\n"
          printf "\n\nGo environment:\n\n"
          go env
          printf "\n\nSystem environment:\n\n"
          env
          # Calculate the short SHA1 hash of the git commit
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "GO_CACHE=$(go env GOCACHE)" >> $GITHUB_OUTPUT

      - name: Run unit tests for packages
        run: go test $(go list ./... | tail -n +2)

      - name: Run integration tests
        run: go test -v -race -coverprofile="codecov.report" -covermode=atomic -timeout 15m -failfast

      - name: Upload the code coverage report to codecov.io
        uses: codecov/codecov-action@v4
        with:
          files: ./codecov.report
          flags: unittests
          name: codecov-gnet
          fail_ci_if_error: true
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
