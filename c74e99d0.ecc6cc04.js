(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{248:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return d}));var o=t(1),i=t(9),a=(t(0),t(280)),r={id:"best-practices",last_modified_on:"2024-04-16",title:"Best practices",description:"Best practices for writing code on top of gnet."},c={id:"tutorial/best-practices",title:"Best practices",description:"Best practices for writing code on top of gnet.",source:"@site/docs/tutorial/best-practices.md",permalink:"/docs/tutorial/best-practices",editUrl:"https://github.com/panjf2000/gnet/edit/master/website/docs/tutorial/best-practices.md",sidebar:"docs",previous:{title:"Quickstart",permalink:"/docs/quickstart"},next:{title:"Benchmark",permalink:"/docs/benchmark"}},l=[{value:"Never run blocking code in OnTraffic(), OnOpen() and OnClose()",id:"never-run-blocking-code-in-ontraffic-onopen-and-onclose",children:[]},{value:"Avoid data corruption",id:"avoid-data-corruption",children:[]},{value:"Leverage Conn.Context() to monopolize data instead of sharing it across connections",id:"leverage-conncontext-to-monopolize-data-instead-of-sharing-it-across-connections",children:[]},{value:"Either loop read data in OnTraffic() or invoke c.Wake() regularly",id:"either-loop-read-data-in-ontraffic-or-invoke-cwake-regularly",children:[]},{value:"Enable poll_opt mode to boost performance",id:"enable-poll_opt-mode-to-boost-performance",children:[]},{value:"Enable gc_opt mode to reduce GC latency",id:"enable-gc_opt-mode-to-reduce-gc-latency",children:[]},{value:"To be continued",id:"to-be-continued",children:[]}],p={rightToc:l};function d(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"never-run-blocking-code-in-ontraffic-onopen-and-onclose"},"Never run blocking code in OnTraffic(), OnOpen() and OnClose()"),Object(a.b)("p",null,"The above three event handlers (callbacks) are executed in event-loops, therefore, running blocking code in them blocks event-loops, which means that the subsequent tasks will have to wait for the preceding blocking event handlers to complete before they get executed."),Object(a.b)("p",null,"To avoid blocking event-loops, asynchronize your blocking code, for example by starting a goroutine with your blocking code and invoking ",Object(a.b)("inlineCode",{parentName:"p"},"Conn.AsyncWrite()")," or ",Object(a.b)("inlineCode",{parentName:"p"},"Conn.AsyncWritev()")," to send response data to the peer endpoint."),Object(a.b)("p",null,"If you're not familiar with how ",Object(a.b)("inlineCode",{parentName:"p"},"gnet")," works, go back and read ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://gnet.host/docs/about/overview/#networking-model-of-multiple-threadsgoroutines"}),"this"),"."),Object(a.b)("h3",{id:"avoid-data-corruption"},"Avoid data corruption"),Object(a.b)("p",null,"Any incoming bytes returned by ",Object(a.b)("inlineCode",{parentName:"p"},"Conn.Peek"),"/",Object(a.b)("inlineCode",{parentName:"p"},"Conn.Next")," must not be used in a new goroutine and the buffer returned by ",Object(a.b)("inlineCode",{parentName:"p"},"Conn.Peek")," must not be used after calling ",Object(a.b)("inlineCode",{parentName:"p"},"Conn.Discard"),"."),Object(a.b)("p",null,"Otherwise, make a copy of the buffer returned by ",Object(a.b)("inlineCode",{parentName:"p"},"Conn.Peek"),"/",Object(a.b)("inlineCode",{parentName:"p"},"Conn.Next")," manually or call ",Object(a.b)("inlineCode",{parentName:"p"},"Conn.Read()")," to read the data into a new buffer to avoid data corruption."),Object(a.b)("h3",{id:"leverage-conncontext-to-monopolize-data-instead-of-sharing-it-across-connections"},"Leverage Conn.Context() to monopolize data instead of sharing it across connections"),Object(a.b)("p",null,"It's recommended to use ",Object(a.b)("inlineCode",{parentName:"p"},"Conn.Context()")," to store necessary resource for each connection, so that each connection can take advantage of its exclusive resource, avoiding the contention of single resource across connections."),Object(a.b)("h3",{id:"either-loop-read-data-in-ontraffic-or-invoke-cwake-regularly"},"Either loop read data in OnTraffic() or invoke c.Wake() regularly"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"gnet")," leverages ",Object(a.b)("inlineCode",{parentName:"p"},"epoll"),"/",Object(a.b)("inlineCode",{parentName:"p"},"kqueue")," with level-triggered mode by default under the hood, you're able to switch to edge-triggered mode since v2.5.0. In LT mode, ",Object(a.b)("inlineCode",{parentName:"p"},"OnTraffic()")," might not be invoked constantly given there is data left in the inbound buffer of a ",Object(a.b)("inlineCode",{parentName:"p"},"gnet.Conn"),", ",Object(a.b)("inlineCode",{parentName:"p"},"OnTraffic()")," will be invoked only when there is data left in the socket recv buffer of the kernel. By contrast, in ET mode, ",Object(a.b)("inlineCode",{parentName:"p"},"OnTraffic()")," will be invoked only when new data arrives at the socket recv buffer of the kernel."),Object(a.b)("p",null,"Thus, you should loop call ",Object(a.b)("inlineCode",{parentName:"p"},"c.Read()"),"/",Object(a.b)("inlineCode",{parentName:"p"},"c.Peek()"),"/",Object(a.b)("inlineCode",{parentName:"p"},"c.Next()")," on a connection in ",Object(a.b)("inlineCode",{parentName:"p"},"OnTraffic()")," to drain the inbound buffer for reading and decoding packets until you reach an incomplete packet, but if you don't, then make sure you call ",Object(a.b)("inlineCode",{parentName:"p"},"c.Wake()")," periodically, otherwise you may never get a chance to read the leftover data until the remote sends new data over and there are new arrivals of data on the socket recv buffer."),Object(a.b)("h3",{id:"enable-poll_opt-mode-to-boost-performance"},"Enable poll_opt mode to boost performance"),Object(a.b)("p",null,"By default, ",Object(a.b)("inlineCode",{parentName:"p"},"gnet")," utilizes the standard package ",Object(a.b)("inlineCode",{parentName:"p"},"golang.org/x/sys/unix")," to implement pollers with ",Object(a.b)("inlineCode",{parentName:"p"},"epoll")," or ",Object(a.b)("inlineCode",{parentName:"p"},"kqueue"),", where a HASH map of ",Object(a.b)("inlineCode",{parentName:"p"},"fd->conn")," is introduced to help retrieve connections by file descriptors returned from pollers, but now you can run ",Object(a.b)("inlineCode",{parentName:"p"},"go build")," with build tags ",Object(a.b)("inlineCode",{parentName:"p"},"poll_opt"),", like this: ",Object(a.b)("inlineCode",{parentName:"p"},"go build -tags=poll_opt"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"gnet")," will switch to the optimized implementations of pollers that invoke the system calls of ",Object(a.b)("inlineCode",{parentName:"p"},"epoll")," or ",Object(a.b)("inlineCode",{parentName:"p"},"kqueue")," directly and add file descriptors to the interest list along with storing the corresponding connection pointers into ",Object(a.b)("inlineCode",{parentName:"p"},"epoll_data")," or ",Object(a.b)("inlineCode",{parentName:"p"},"kevent"),", in which case ",Object(a.b)("inlineCode",{parentName:"p"},"gnet")," can get rid of the HASH MAP of ",Object(a.b)("inlineCode",{parentName:"p"},"fd->conn")," and regain each connection pointer by the conversion of ",Object(a.b)("inlineCode",{parentName:"p"},"void*")," pointer in the I/O event-looping. In theory, it ought to achieve a higher performance with this optimization."),Object(a.b)("p",null,"Visit ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/panjf2000/gnet/pull/230"}),"#230")," for code details."),Object(a.b)("h3",{id:"enable-gc_opt-mode-to-reduce-gc-latency"},"Enable gc_opt mode to reduce GC latency"),Object(a.b)("p",null,"By default, ",Object(a.b)("inlineCode",{parentName:"p"},"gnet")," uses ",Object(a.b)("inlineCode",{parentName:"p"},"map")," as the internal storage of connections, but now you can run ",Object(a.b)("inlineCode",{parentName:"p"},"go build")," with build tags ",Object(a.b)("inlineCode",{parentName:"p"},"gc_opt"),", like this: ",Object(a.b)("inlineCode",{parentName:"p"},"go build -tags=gc_opt"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"gnet")," will switch to the optimized implementation of connections storage that uses a new data structure ",Object(a.b)("inlineCode",{parentName:"p"},"matrix")," for managing connections, in which case ",Object(a.b)("inlineCode",{parentName:"p"},"gnet")," eliminates the pointers in ",Object(a.b)("inlineCode",{parentName:"p"},"map")," to reduce the GC latency significantly."),Object(a.b)("p",null,"Visit ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://gnet.host/blog/announcing-gnet-v2-3-0/"}),"Announcing gnet v2.3.0")," for more details."),Object(a.b)("h3",{id:"to-be-continued"},"To be continued"))}d.isMDXComponent=!0},280:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var o=t(0),i=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=i.a.createContext({}),d=function(e){var n=i.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c({},n,{},e)),t},b=function(e){var n=d(e.components);return i.a.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},u=Object(o.forwardRef)((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=d(t),u=o,m=b["".concat(r,".").concat(u)]||b[u]||s[u]||a;return t?i.a.createElement(m,c({ref:n},p,{components:t})):i.a.createElement(m,c({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,r[1]=c;for(var p=2;p<a;p++)r[p]=t[p];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);